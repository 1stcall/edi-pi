---
- name: Create temporary and real firmware directory within boot folder.
  file: dest=/boot/{{ item }} state=directory
  with_items:
  - firmware_temp
  - firmware

# Do mount directly to avoid fstab entry:
- name: Create /boot/firmware mount to enable installation of firmware package.
  command: mount --bind /boot/firmware_temp /boot/firmware

- name: Install packages that are essential for running on bare metal.
  apt: name={{ item }} state=present install_recommends=no
  with_items: "{{ bare_metal_packages }}"

- name: Install backports packages that are essential for running on bare metal.
  apt: name={{ item }} state=present install_recommends=no default_release=stretch-backports
  with_items: "{{ bare_metal_backports_packages }}"

- name: Set stretch as default release.
  copy: src=08default-release dest={{ default_release_file }}

- name: Add buster repository for latest firmware.
  copy: src=buster.list dest={{ buster_list }}

- name: Update apt cache.
  apt: update_cache=yes

- name: Install buster packages that are essential for running on bare metal.
  apt: name={{ item }} state=present install_recommends=no default_release=buster
  with_items: "{{ bare_metal_buster_packages }}"

- name: Remove buster repository.
  file: dest={{ buster_list }} state=absent

- name: Remove stretch default release setting.
  file: dest={{ default_release_file }} state=absent

- name: Update apt cache.
  apt: update_cache=yes

- name: Send console output to tty0 instead of ttyAMA0 (bluetooth).
  lineinfile:
    dest: /boot/firmware_temp/cmdline.txt
    regexp: '^console=ttyAMA0,115200(.*)$'
    line: 'console=tty0\1'
    backrefs: yes

# Remark: With Ansible >= 2.4 the unmounting can be done using the mount module.
- name: Unmount /boot/firmware.
  command: umount /boot/firmware
