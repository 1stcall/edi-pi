---
- name: Remove eventually installed raspi3-firmware package.
  apt:
    name: raspi3-firmware
    state: absent

- name: Install apt-transport-https.
  apt:
    name: apt-transport-https
    install_recommends: yes

- name: Add edi-repository apt-key.
  apt_key: data="{{ lookup('file', 'edi-repository.key') }}" state=present

- name: Add edi-repository to sources.list.d.
  apt_repository:
    repo: deb https://get-edi.github.io/edi-repository/debian stretch main
    state: present
    filename: edi-repository

- name: Update apt cache.
  apt: 
    update_cache: yes

- name: Ensures edi-boot-shim config.d directory exists.
  file:
    path: /etc/edi-boot-shim/edi-boot-shim.cfg.d
    state: directory

- name: Configure edi-boot-shim for multiboot.
  copy:
    src: multiboot.cfg
    dest: /etc/edi-boot-shim/edi-boot-shim.cfg.d

- name: Install edi-boot-shim.
  apt:
    name: edi-boot-shim
    install_recommends: no

- name: Create boot firmware directory.
  file:
    path: "{{ uboot_location }}"
    state: directory

- name: Setup boot configuration.
  copy:
    src: config.txt.{{ edi_bootstrap_architecture }}
    dest: "{{ uboot_location }}/config.txt"

- name: Install the raspberrypi bootloader.
  unarchive: 
    src: raspberrypi-bootloader.tar.gz
    dest: "{{ uboot_location }}"
    owner: root
    group: root 
    creates: "{{ uboot_location }}/bootcode.bin"

- name: Install the u-boot bootloader.
  unarchive: 
    src: u-boot-bootloader.{{ edi_bootstrap_architecture }}.tar.gz
    dest: "{{ uboot_location }}"
    owner: root
    group: root 
    creates: "{{ uboot_location }}/u-boot.bin"

- name: Copy the raw boot script to the boot folder.
  copy:
    src: boot.scr.txt
    dest: "{{ uboot_location }}"

- name: Create boot script.
  command: mkimage -A arm -T script -O linux -d boot.scr.txt boot.scr
  args:
    chdir: "{{ uboot_location }}"
    creates: "{{ uboot_location }}/boot.scr"

- name: Configure u-boot-tools.
  template:
    src: fw_env.config
    dest: /etc

