#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

GITOPS_USER_NAME="{{ gitops_user_name }}"
GITOPS_USER_GROUP_NAME="{{ gitops_user_group_name }}"
GITOPS_USER="sudo -u ${GITOPS_USER_NAME}"
WORKDIR="/home/${GITOPS_USER_NAME}"

print_error()
{
    local MESSAGE="${1}"
    >&2 echo -e "Error: ${MESSAGE}"
}

unexpected_exit()
{
    local TEMPDIR="${1}"
    print_error "Going to clean up after abnormal script termination."
    clean_up "${TEMPDIR}"
    trap - EXIT
    exit 3
}

clean_up()
{
    local TEMPDIR="${1}"
    ${GITOPS_USER} rm -rf "${TEMPDIR}"
}

if [ $# -ne 1 ]
then
    >&2 echo "Error: This script is expecting exactly one argument (the configuration file)."
    exit 2
fi

CONFIG="$1"

if [ ! -e "${CONFIG}" ]
then
    >&2 echo "Error: The configuration file ${CONFIG} does not exist."
    exit 1
fi

if [ ! -s "${CONFIG}" ]
then
    >&2 echo "Error: The configuration file ${CONFIG} is empty."
    exit 1
fi

if ! jq -e . >/dev/null 2>&1 < "${CONFIG}"
then
    >&2 echo "Error: Failed to parse ${CONFIG}."
    exit 1
fi

if ! PLAYBOOK_URL="$(jq -r -e .playbook_url < "${CONFIG}")"
then
    echo "${0}: Nothing to do as there is no 'playbook_url'."
    exit 0
fi

if ! PLAYBOOK_VERSION="$(jq -r -e .playbook_version < "${CONFIG}")"
then
    echo "${0}: Nothing to do as there is no 'playbook_version'."
    exit 0
fi

TEMPDIR=$(${GITOPS_USER} mktemp -p "${WORKDIR}" -d -t .tmp.XXXXXXXX)
trap 'unexpected_exit "${TEMPDIR}"' EXIT

cd "${TEMPDIR}"

RETRY_SEC=( 0 60 120 240 480 960 )

PLAYBOOK_URL_REACHABLE=0

for seconds in "${RETRY_SEC[@]}"
do
    sleep "$seconds"
    if ${GITOPS_USER} GIT_TERMINAL_PROMPT=0 git ls-remote --heads "${PLAYBOOK_URL}" > /dev/null 2>&1
    then
        PLAYBOOK_URL_REACHABLE=1
        break
    else
        echo "${0}: Unable to fetch playbook '${PLAYBOOK_URL}'. Going to retry!"
    fi
done

if [[ "${PLAYBOOK_URL_REACHABLE}" -eq 0 ]]
then
    >&2 echo "Error: Failed to fetch playbook '${PLAYBOOK_URL}'."
    exit 1
fi

${GITOPS_USER} GIT_TERMINAL_PROMPT=0 git clone --branch "${PLAYBOOK_VERSION}" --depth 1 "${PLAYBOOK_URL}" playbook

ROLES_PATH="${TEMPDIR}/playbook/roles"
${GITOPS_USER} mkdir -p "${ROLES_PATH}"

cd "${TEMPDIR}/playbook"
cp "${CONFIG}" .
CONFIG_FILE=$(basename -- "${CONFIG}")
chown "${GITOPS_USER_NAME}":"${GITOPS_USER_GROUP_NAME}" "${CONFIG_FILE}"

if [ -e requirements.yml ]
then
    ${GITOPS_USER} ansible-galaxy install --roles-path "${ROLES_PATH}" -r requirements.yml
fi

${GITOPS_USER} ansible-playbook --connection=local --inventory 127.0.0.1, playbook.yml --extra-vars "@${CONFIG_FILE}"

clean_up "${TEMPDIR}"

trap - EXIT

if ! PLAYBOOK_NEEDS_REBOOT="$(jq -r -e .playbook_needs_reboot < "${CONFIG}")"
then
    exit 0
else
    if [ "${PLAYBOOK_NEEDS_REBOOT}" == "true" ]
    then
        exit 20
    else
        exit 0
    fi
fi
