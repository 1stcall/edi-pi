#!/bin/bash

# Copyright (C) 2017 Matthias Luescher
#
# Authors:
#  Matthias Luescher
#
# Acknowledgement:
#  The non trivial part of this script is heavily inspired by rpi23-gen-image
#  written by Jan Wagner. See https://github.com/drtyhlpr/rpi23-gen-image.
#
# This file is part of edi-pi.
#
# edi-pi is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# edi-pi is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with edi.  If not, see <http://www.gnu.org/licenses/>.

set -o errexit
set -o pipefail
set -o nounset

print_usage()
{
    cat <<EOF
Convert a root file system into a Raspberry Pi image.

Required arguments:
 -i DIRECTORY, --input=DIRECTORY    : Directory that contains the root file system.
 -o FILE, --output=FILE             : Name of the file that will contain the resulting Raspberry Pi image.
Optional arguments:
 -h, --help                         : Print help text.
 --log=LEVEL                        : Use --log=DEBUG to trace all commands.
 -w DIRECTORY, --workdir=DIRECTORY  : Working directory.
EOF
}

print_error()
{
    local MESSAGE="${1}"
    >&2 echo -e "\033[91mError: ${MESSAGE}\033[0m"
}

print_error_and_exit()
{
    local MESSAGE="${1}"
    print_error "${MESSAGE}"
    exit 1
}

unexpected_exit()
{
    local TEMPDIR="${1}"
    print_error "Going to clean up after abnormal script termination."
    clean_up "${TEMPDIR}"
    rm -f "${RPI_IMAGE}"
    trap - EXIT
    print_error_and_exit "Abnormal script termination."
}

clean_up()
{
    local TEMPDIR="${1}"

    if [ "${FIRMWARE_MNT}" != "unused" ] ; then umount "${FIRMWARE_MNT}"; FIRMWARE_MNT="unused" ; fi
    if [ "${DATA_MNT}" != "unused" ] ; then umount "${DATA_MNT}"; DATA_MNT="unused" ; fi
    if [ "${ROOT_MNT}" != "unused" ] ; then umount "${ROOT_MNT}"; ROOT_MNT="unused" ; fi
    if [ "${ROOT_LD}" != "unused" ] ; then losetup -d "${ROOT_LD}"; ROOT_LD="unused" ; fi
    if [ "${FIRMWARE_LD}" != "unused" ]; then losetup -d "${FIRMWARE_LD}"; FIRMWARE_LD="unused" ; fi
    if [ "${DATA_LD}" != "unused" ]; then losetup -d "${DATA_LD}"; DATA_LD="unused" ; fi
    rm -rf "${TEMPDIR}"
}

if ! options=$(getopt -o hi:o:w: -l help,log:,input:,output:,workdir: -- "$@")
then
    print_usage
    print_error_and_exit "Invalid option."
fi
eval set -- "$options"

WORKDIR="$(pwd)"
SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOTFS_DIR=""
RPI_IMAGE=""
LOG_LEVEL="INFO"

while true
do
    case "${1}" in
        -h|--help)          print_usage && exit 0;;
        -i|--input)         ROOTFS_DIR="${2}"; shift 2;;
        -o|--output)        RPI_IMAGE="${2}"; shift 2;;
        -w|--workdir)       WORKDIR="${2}"; shift 2;;
        --log)              LOG_LEVEL="${2}"; shift 2;;
        *)                  break ;;
    esac
done

if [ "${LOG_LEVEL}" == "DEBUG" ]; then
    set -x
fi

if [[ ${EUID} -ne 0 ]]; then
   print_error_and_exit "This script must be run as root."
fi

if [ -z "${ROOTFS_DIR}" ]
then
    print_usage
    print_error_and_exit "Missing rootfs directory parameter."
fi

if [ -z "${RPI_IMAGE}" ]
then
    print_usage
    print_error_and_exit "Missing output archive."
fi

TEMPDIR="$(mktemp -p ${WORKDIR} -d -t .tmp.XXXXXXXX)"

ROOT_LD="unused"
FIRMWARE_LD="unused"
DATA_LD="unused"
ROOT_MNT="unused"
FIRMWARE_MNT="unused"
DATA_MNT="unused"

trap "unexpected_exit ${TEMPDIR}" EXIT

ROOTFS_SIZE_KB=$(expr `du -s "${ROOTFS_DIR}" | awk '{ print $1 }'`)
echo "Source rootfs is ${ROOTFS_SIZE_KB}KB big."

# Calculate the amount of needed 512 byte sectors:
TABLE_SIZE_M=1
FIRMWARE_PARTITION_SIZE_M=128
DATA_PARTITION_SIZE_M=256

LOSETUP_DATA_OFFSET_M=$(expr ${TABLE_SIZE_M} + ${FIRMWARE_PARTITION_SIZE_M})
LOSETUP_ROOT_OFFSET_M=$(expr ${TABLE_SIZE_M} + ${FIRMWARE_PARTITION_SIZE_M} + ${DATA_PARTITION_SIZE_M})

TABLE_SECTORS=$(expr ${TABLE_SIZE_M} \* 1024 \* 1024 \/ 512)
FIRMWARE_SECTORS=$(expr ${FIRMWARE_PARTITION_SIZE_M} \* 1024 \* 1024 \/ 512)
DATA_SECTORS=$(expr ${DATA_PARTITION_SIZE_M} \* 1024 \* 1024 \/ 512)

DATA_OFFSET_SECTOR=$(expr ${TABLE_SECTORS} + ${FIRMWARE_SECTORS})
ROOT_OFFSET_SECTOR=$(expr ${TABLE_SECTORS} + ${FIRMWARE_SECTORS} + ${DATA_SECTORS})

# The root partition is ext4.
# This means more space than the actual used space of the chroot is used.
# As overhead for journaling and reserved blocks 25% are added.
ROOT_SECTORS=$(expr $(expr ${ROOTFS_SIZE_KB} + ${ROOTFS_SIZE_KB} \/ 100 \* 25) \* 1024 \/ 512)

# Calculate required image size in 512 Byte sectors:
IMAGE_SECTORS=$(expr ${TABLE_SECTORS} + ${FIRMWARE_SECTORS} + ${DATA_SECTORS} + ${ROOT_SECTORS})

# Prepare the image file.
dd if=/dev/zero of="${RPI_IMAGE}" bs=512 count=${IMAGE_SECTORS}

# Write partition table
sfdisk -q "${RPI_IMAGE}" <<EOM
${TABLE_SECTORS},${FIRMWARE_SECTORS},c,*
${DATA_OFFSET_SECTOR},${DATA_SECTORS},83
${ROOT_OFFSET_SECTOR},${ROOT_SECTORS},83
EOM

# Setup temporary loop devices:
echo "Setting up loop devices."
FIRMWARE_LD="$(losetup -o ${TABLE_SIZE_M}M --sizelimit ${FIRMWARE_PARTITION_SIZE_M}M -f --show ${RPI_IMAGE})"
DATA_LD="$(losetup -o ${LOSETUP_DATA_OFFSET_M}M --sizelimit ${DATA_PARTITION_SIZE_M}M -f --show ${RPI_IMAGE})"
ROOT_LD="$(losetup -o ${LOSETUP_ROOT_OFFSET_M}M -f --show ${RPI_IMAGE})"

# Build filesystems
mkfs.vfat "${FIRMWARE_LD}"
mkfs.ext4 "${DATA_LD}"
mkfs.ext4 "${ROOT_LD}"

fatlabel "${FIRMWARE_LD}" boot
e2label "${DATA_LD}" data
e2label "${ROOT_LD}" primary

# Mount the temporary loop devices
ROOT_MNT="${TEMPDIR}/loop_mnt"
mkdir -p "${ROOT_MNT}"
mount "${ROOT_LD}" "${ROOT_MNT}"

FIRMWARE_MNT="${ROOT_MNT}/boot/firmware"
mkdir -p "${FIRMWARE_MNT}"
mount "${FIRMWARE_LD}" "${FIRMWARE_MNT}"

DATA_MNT="${ROOT_MNT}/data"
mkdir -p "${DATA_MNT}"
mount "${DATA_LD}" "${DATA_MNT}"

# Copy all files from the LXD rootfs to the loop device mount point directory
rsync -a "${ROOTFS_DIR}/" "${ROOT_MNT}/"

clean_up "${TEMPDIR}"

trap - EXIT
